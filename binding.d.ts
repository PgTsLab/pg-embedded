/* auto-generated by NAPI-RS */
/* eslint-disable */
/** Connection information structure */
export declare class ConnectionInfo {
  /** Host address */
  host: string
  /** Port number */
  port: number
  /** Username */
  username: string
  /** Password */
  password: string
  /** Database name */
  databaseName: string
  /** Connection string */
  connectionString: string
  /** Generate a safe connection string without password (for logging) */
  safeConnectionString(): string
  /** Generate JDBC format connection string */
  jdbcUrl(): string
}

/**
 * A tool for creating a dump of all databases in a PostgreSQL cluster.
 *
 * This class provides an interface to the `pg_dumpall` command-line utility.
 *
 * @example
 * ```typescript
 * import { PgDumpallTool } from 'pg-embedded';
 *
 * const dumpall = new PgDumpallTool({
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *   },
 *   programDir: '/path/to/postgres/bin',
 *   file: 'fulldump.sql',
 * });
 *
 * const result = await dumpall.execute();
 * if (result.exitCode === 0) {
 *   console.log('Dump completed successfully.');
 * } else {
 *   console.error(`Dump failed with error: ${result.stderr}`);
 * }
 * ```
 */
export declare class PgDumpallTool {
  /**
   * Creates a new `PgDumpallTool` instance.
   * @param options - The configuration options for `pg_dumpall`.
   */
  constructor(options: PgDumpallOptions)
  /**
   * Executes the `pg_dumpall` command and returns the output as a string.
   *
   * This method is useful for capturing the dump output directly, for example,
   * to process it in memory or send it over a network stream.
   *
   * @returns A promise that resolves with the result of the command execution.
   * The dump content will be available in the `stdout` property of the result.
   */
  executeToString(): Promise<ToolResult>
  /**
   * Executes the `pg_dumpall` command.
   *
   * If the `file` option is specified in the constructor, the dump will be written to that file.
   * Otherwise, the dump output will be available in the `stdout` property of the returned result.
   *
   * @returns A promise that resolves with the result of the command execution.
   */
  execute(): Promise<ToolResult>
}

/**
 * PostgreSQL database backup tool using pg_dump.
 *
 * This class provides a TypeScript interface for creating database backups using PostgreSQL's
 * pg_dump utility. It supports all major pg_dump options and can output to files or return
 * the dump as a string.
 *
 * Both `connection` and `programDir` parameters are required for proper operation.
 *
 * @example Basic usage
 * ```typescript
 * import { PgDumpTool } from 'pg-embedded';
 *
 * const dumpTool = new PgDumpTool({
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'mydb'
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin'
 * });
 *
 * const result = await dumpTool.execute();
 * if (result.exitCode === 0) {
 *   console.log('Database dump:', result.stdout);
 * }
 * ```
 *
 * @example Dump to file
 * ```typescript
 * const dumpTool = new PgDumpTool({
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'mydb'
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin',
 *   file: './backup.sql',
 *   create: true,
 *   clean: true
 * });
 *
 * await dumpTool.execute();
 * ```
 *
 * @example Schema-only dump
 * ```typescript
 * const dumpTool = new PgDumpTool({
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'mydb'
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin',
 *   schemaOnly: true,
 *   noOwner: true,
 *   noPrivileges: true
 * });
 * ```
 */
export declare class PgDumpTool {
  /**
   * Creates a new PgDumpTool instance with the specified configuration.
   *
   * @param options - Configuration options for the pg_dump operation (connection and programDir are required)
   * @returns A new PgDumpTool instance ready to execute dumps
   *
   * @example
   * ```typescript
   * const dumpTool = new PgDumpTool({
   *   connection: {
   *     host: 'localhost',
   *     port: 5432,
   *     username: 'postgres',
   *     password: 'password',
   *     database: 'mydb'
   *   },
   *   programDir: '/home/postgresql/17.5.0/bin'
   * });
   * ```
   */
  constructor(options: PgDumpOptions)
  /**
   * Executes the pg_dump command and returns the backup content as a string.
   *
   * This method forces the output to stdout, ignoring the `file` option if it was set.
   * It is a convenient way to get the dump content directly into a variable.
   *
   * @returns Promise<ToolResult> containing exit code, stdout (the dump content), and stderr.
   * @throws Error if the command fails to execute or if there are configuration issues.
   *
   * @example
   * ```typescript
   * const dumpTool = new PgDumpTool({
   *   connection: { host: 'localhost', port: 5432, user: 'postgres' },
   *   programDir: '/home/postgresql/17.5.0/bin',
   * });
   * const result = await dumpTool.executeToString();
   * if (result.exitCode === 0) {
   *   console.log('Dump successful. SQL content:', result.stdout);
   * } else {
   *   console.error('Dump failed:', result.stderr);
   * }
   * ```
   */
  executeToString(): Promise<ToolResult>
  /**
   * Executes the pg_dump command with the configured options.
   *
   * This method runs the pg_dump utility and returns the result. The behavior depends on
   * whether a file output path was specified:
   * - If `file` option is set: writes dump to the specified file, stdout will be empty
   * - If `file` option is not set: returns dump content in the stdout field
   *
   * @returns Promise<ToolResult> containing exit code, stdout, and stderr
   * @throws Error if the command fails to execute or if there are configuration issues
   *
   * @example Dump to string
   * ```typescript
   * const result = await dumpTool.execute();
   * if (result.exitCode === 0) {
   *   console.log('Dump successful');
   *   console.log('SQL content:', result.stdout);
   * } else {
   *   console.error('Dump failed:', result.stderr);
   * }
   * ```
   *
   * @example Dump to file
   * ```typescript
   * const dumpTool = new PgDumpTool({
   *   connection: {
   *     host: 'localhost',
   *     port: 5432,
   *     username: 'postgres',
   *     password: 'password',
   *     database: 'mydb'
   *   },
   *   programDir: '/home/postgresql/17.5.0/bin',
   *   file: './backup.sql'
   * });
   *
   * const result = await dumpTool.execute();
   * if (result.exitCode === 0) {
   *   console.log('Backup saved to ./backup.sql');
   * }
   * ```
   */
  execute(): Promise<ToolResult>
}

/**
 * A tool for checking the connection status of a PostgreSQL server.
 *
 * This class provides a TypeScript interface for checking PostgreSQL server availability
 * using the pg_isready utility. Both `connection` and `programDir` parameters are required.
 *
 * @example Basic connection check
 * ```typescript
 * import { PgIsReadyTool } from 'pg-embedded';
 *
 * const readyTool = new PgIsReadyTool({
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'mydb'
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin'
 * });
 *
 * const isReady = await readyTool.check();
 * console.log('Server is ready:', isReady);
 * ```
 *
 * @example Detailed status check
 * ```typescript
 * const result = await readyTool.execute();
 * if (result.exitCode === 0) {
 *   console.log('Server is accepting connections');
 * } else {
 *   console.log('Server is not ready:', result.stderr);
 * }
 * ```
 */
export declare class PgIsReadyTool {
  /**
   * Creates a new `PgIsReadyTool` instance.
   *
   * @param options - Configuration options for the pg_isready operation (connection and programDir are required)
   * @returns A new PgIsReadyTool instance ready to check server status
   *
   * @example
   * ```typescript
   * const readyTool = new PgIsReadyTool({
   *   connection: {
   *     host: 'localhost',
   *     port: 5432,
   *     username: 'postgres',
   *     password: 'password',
   *     database: 'mydb'
   *   },
   *   programDir: '/home/postgresql/17.5.0/bin',
   *   timeout: 10
   * });
   * ```
   */
  constructor(options: PgIsReadyOptions)
  /** Performs a quick check to see if the server is running. */
  check(): Promise<boolean>
  /** Executes `pg_isready` and returns the detailed result. */
  execute(): Promise<ToolResult>
}

/**
 * A tool for restoring a PostgreSQL database from an archive created by `pg_dump`.
 */
export declare class PgRestoreTool {
  /**
   * Creates a new `PgRestoreTool` instance.
   * @param {PgRestoreOptions} options - The options for the `pg_restore` tool.
   * @returns {PgRestoreTool} A new `PgRestoreTool` instance.
   */
  constructor(options: PgRestoreOptions)
  /**
   * Executes the pg_restore command with the configured options.
   *
   * This method runs the pg_restore utility and restores a database from an archive.
   *
   * @returns {Promise<ToolResult>} A promise that resolves with the result of the command,
   * including exit code, stdout, and stderr.
   * @throws {Error} If the command fails to execute or if there are configuration issues.
   *
   * @example
   * ```typescript
   * const restoreTool = new PgRestoreTool({
   *   connection: {
   *     host: 'localhost',
   *     port: 5432,
   *     username: 'postgres',
   *     database: 'restored_db'
   *   },
   *   programDir: '/home/postgresql/17.5.0/bin',
   *   file: './backup.sql',
   *   clean: true,
   *   create: true
   * });
   *
   * const result = await restoreTool.execute();
   * if (result.exitCode === 0) {
   *   console.log('Database restored successfully.');
   * } else {
   *   console.error('Restore failed:', result.stderr);
   * }
   * ```
   */
  execute(): Promise<ToolResult>
}

/**
 * PostgreSQL embedded instance manager
 *
 * This class provides a high-level interface for managing embedded PostgreSQL instances.
 * It supports both synchronous and asynchronous operations, automatic resource management,
 * and connection caching for optimal performance.
 *
 * @example
 * ```typescript
 * import { PostgresInstance } from 'pg-embedded';
 *
 * const instance = new PostgresInstance({
 *   port: 5432,
 *   username: 'postgres',
 *   password: 'password'
 * });
 *
 * await instance.start();
 * await instance.createDatabase('mydb');
 * await instance.stop();
 * ```
 */
export declare class PostgresInstance {
  /**
   * Creates a new PostgreSQL instance with the specified settings
   *
   * @param settings - Configuration settings for the PostgreSQL instance
   * @returns A new PostgresInstance
   *
   * @example
   * ```typescript
   * const instance = new PostgresInstance({
   *   port: 5432,
   *   username: 'postgres',
   *   password: 'password',
   *   persistent: false
   * });
   * ```
   */
  constructor(settings?: PostgresSettings | undefined | null)
  /**
   * Gets the unique instance ID
   *
   * @returns The unique identifier for this PostgreSQL instance
   */
  get instanceId(): string
  /**
   * Gets the configuration hash for this instance
   *
   * This hash is used internally for caching and can be useful for debugging.
   *
   * @returns A string hash of the instance configuration
   */
  getConfigHash(): string
  /** Gets the directory where the PostgreSQL binaries are located. */
  get programDir(): string
  /**
   * Gets the current state of the PostgreSQL instance
   *
   * @returns The current instance state (Stopped, Starting, Running, or Stopping)
   */
  get state(): InstanceState
  /**
   * Gets the connection information for the PostgreSQL instance
   *
   * This method returns cached connection information when available for better performance.
   * The cache is automatically invalidated after 5 minutes.
   *
   * @returns Connection information including host, port, username, and connection string
   * @throws Error if the instance is not running
   */
  get connectionInfo(): ConnectionInfo
  /**
   * Checks if the PostgreSQL instance is healthy and running
   *
   * @returns true if the instance is running and healthy, false otherwise
   */
  isHealthy(): boolean
  /**
   * # Safety
   * Sets up the PostgreSQL instance asynchronously
   *
   * This method initializes the PostgreSQL instance but does not start it.
   * It's automatically called by start() if needed.
   *
   * @returns Promise that resolves when setup is complete
   * @throws Error if setup fails
   */
  setup(): Promise<void>
  /**
   * # Safety
   * Starts the PostgreSQL instance asynchronously
   *
   * This method starts the PostgreSQL server and makes it ready to accept connections.
   * It includes automatic setup if the instance hasn't been set up yet.
   *
   * @returns Promise that resolves when the instance is started and ready
   * @throws Error if the instance is already running or if startup fails
   *
   * @example
   * ```typescript
   * await instance.start();
   * console.log('PostgreSQL is ready!');
   * ```
   */
  start(): Promise<void>
  /**
   * # Safety
   * Stops the PostgreSQL instance asynchronously
   *
   * This method gracefully shuts down the PostgreSQL server.
   *
   * @returns Promise that resolves when the instance is stopped
   * @throws Error if the instance is already stopped or if stopping fails
   *
   * @example
   * ```typescript
   * await instance.stop();
   * console.log('PostgreSQL stopped');
   * ```
   */
  stop(): Promise<void>
  /**
   * # Safety
   * Creates a new database asynchronously
   *
   * @param name - The name of the database to create
   * @returns Promise that resolves when the database is created
   * @throws Error if the instance is not running or if database creation fails
   *
   * @example
   * ```typescript
   * await instance.createDatabase('myapp');
   * ```
   */
  createDatabase(name: string): Promise<void>
  /**
   * # Safety
   * Drops (deletes) a database asynchronously
   *
   * @param name - The name of the database to drop
   * @returns Promise that resolves when the database is dropped
   * @throws Error if the instance is not running or if database deletion fails
   *
   * @example
   * ```typescript
   * await instance.dropDatabase('myapp');
   * ```
   */
  dropDatabase(name: string): Promise<void>
  /**
   * Checks if a database exists asynchronously
   *
   * @param name - The name of the database to check
   * @returns Promise that resolves to true if the database exists, false otherwise
   * @throws Error if the instance is not running or if the check fails
   *
   * @example
   * ```typescript
   * const exists = await instance.databaseExists('myapp');
   * if (exists) {
   *   console.log('Database exists');
   * }
   * ```
   */
  databaseExists(name: string): Promise<boolean>
  /**
   * # Safety
   * Starts the PostgreSQL instance asynchronously with a timeout
   *
   * @param timeout_seconds - Maximum time to wait for startup in seconds
   * @returns Promise that resolves when the instance is started and ready
   * @throws Error if the instance is already running, if startup fails, or if timeout is exceeded
   *
   * @example
   * ```typescript
   * await instance.startWithTimeout(30); // 30 second timeout
   * ```
   */
  startWithTimeout(timeoutSeconds: number): Promise<void>
  /**
   * # Safety
   * Stops the PostgreSQL instance asynchronously with a timeout
   *
   * @param timeout_seconds - Maximum time to wait for shutdown in seconds
   * @returns Promise that resolves when the instance is stopped
   * @throws Error if the instance is already stopped, if stopping fails, or if timeout is exceeded
   *
   * @example
   * ```typescript
   * await instance.stopWithTimeout(10); // 10 second timeout
   * ```
   */
  stopWithTimeout(timeoutSeconds: number): Promise<void>
  /**
   * Gets the startup time of the PostgreSQL instance in seconds
   *
   * This method returns the time it took for the last successful start operation.
   *
   * @returns The startup time in seconds, or null if the instance hasn't been started yet
   *
   * @example
   * ```typescript
   * await instance.start();
   * const startupTime = instance.getStartupTime();
   * console.log(`Started in ${startupTime} seconds`);
   * ```
   */
  getStartupTime(): number | null
  /**
   * Clears the connection information cache
   *
   * This forces the next call to connectionInfo to regenerate the connection information.
   *
   * @returns void
   */
  clearConnectionCache(): void
  /**
   * Checks if the connection information cache is valid
   *
   * The cache is considered valid if it exists and is less than 5 minutes old.
   *
   * @returns true if the cache is valid, false otherwise
   */
  isConnectionCacheValid(): boolean
  /**
   * Gets the PostgreSQL version used by this instance
   *
   * @returns PostgreSQL version string (e.g., "15.4")
   *
   * @example
   * ```typescript
   * const version = instance.getPostgreSQLVersion();
   * console.log(`Using PostgreSQL ${version}`);
   * ```
   */
  getPostgreSqlVersion(): string
  /**
   * # Safety
   * Manually cleans up all resources associated with this instance
   *
   * This method stops the PostgreSQL instance (if running) and cleans up all resources.
   * It's automatically called when the instance is dropped, but can be called manually
   * for immediate cleanup.
   *
   * @returns void
   *
   * @example
   * ```typescript
   * await instance.cleanup();
   * console.log('Resources cleaned up');
   * ```
   */
  cleanup(): Promise<void>
}

/**
 * A tool for executing SQL commands and scripts using the `psql` interactive terminal.
 *
 * This class provides a TypeScript interface for running SQL commands and scripts using
 * PostgreSQL's psql utility. Both `connection` and `programDir` parameters are required.
 *
 * @example Basic SQL command execution
 * ```typescript
 * import { PsqlTool } from 'pg-embedded';
 *
 * const psqlTool = new PsqlTool({
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'mydb'
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin'
 * });
 *
 * const result = await psqlTool.executeCommand('SELECT * FROM users;');
 * if (result.exitCode === 0) {
 *   console.log('Query result:', result.stdout);
 * }
 * ```
 *
 * @example Execute SQL file
 * ```typescript
 * const result = await psqlTool.executeFile('./schema.sql');
 * if (result.exitCode === 0) {
 *   console.log('Script executed successfully');
 * }
 * ```
 */
export declare class PsqlTool {
  /**
   * Creates a new instance of the `PsqlTool`.
   *
   * @param options - Configuration options for the psql operation (connection and programDir are required)
   * @returns A new PsqlTool instance ready to execute SQL commands
   *
   * @example
   * ```typescript
   * const psqlTool = new PsqlTool({
   *   connection: {
   *     host: 'localhost',
   *     port: 5432,
   *     username: 'postgres',
   *     password: 'password',
   *     database: 'mydb'
   *   },
   *   programDir: '/home/postgresql/17.5.0/bin'
   * });
   * ```
   */
  constructor(options: PsqlOptions)
  /**
   * Executes a given SQL command string.
   *
   * This method allows reusing a `PsqlTool` instance with the same connection settings
   * to run multiple different commands.
   *
   * @param command_str - The SQL command string to execute.
   * @returns A promise that resolves to a `ToolResult` object.
   * @throws An error if the `psql` command fails to execute.
   *
   * @example
   * ```typescript
   * const result = await psql.executeCommand('SELECT version();');
   * console.log(result.stdout);
   * ```
   */
  executeCommand(commandStr: string): Promise<ToolResult>
  /**
   * Executes SQL commands from a given file.
   *
   * This method allows reusing a `PsqlTool` instance to run multiple different SQL script files.
   *
   * @param file_path - The path to the file containing SQL commands.
   * @returns A promise that resolves to a `ToolResult` object.
   * @throws An error if the `psql` command fails to execute.
   *
   * @example
   * ```typescript
   * const result = await psql.executeFile('/path/to/my/script.sql');
   * console.log(result.stdout);
   * ```
   */
  executeFile(filePath: string): Promise<ToolResult>
}

/** Build information */
export interface BuildInfo {
  /** Target platform (e.g., "x86_64-apple-darwin") */
  target: string
  /** Build profile (debug or release) */
  profile: string
  /** Rust compiler version used for build */
  rustcVersion: string
  /** Build timestamp */
  buildTimestamp: string
}

/** Configuration for connecting to a PostgreSQL server. */
export interface ConnectionConfig {
  /** The host of the PostgreSQL server. */
  host?: string
  /** The port of the PostgreSQL server. */
  port?: number
  /** The username to connect with. */
  username?: string
  /** The password to connect with. */
  password?: string
  /** The database to connect to. */
  database?: string
}

/**
 * Gets the package version of pg-embedded
 *
 * @returns Package version string (e.g., "1.0.0")
 *
 * @example
 * ```typescript
 * import { getPackageVersion } from 'pg-embedded';
 *
 * const version = getPackageVersion();
 * console.log(`pg-embedded version: ${version}`);
 * ```
 */
export declare function getPackageVersion(): string

/**
 * Gets the version of the embedded PostgreSQL binary
 *
 * @returns PostgreSQL version string (e.g., "15.4")
 *
 * @example
 * ```typescript
 * import { getPostgreSQLVersion } from 'pg-embedded';
 *
 * const pgVersion = getPostgreSQLVersion();
 * console.log(`Using PostgreSQL ${pgVersion}`);
 * ```
 */
export declare function getPostgreSqlVersion(): string

/**
 * Gets comprehensive version information about pg-embedded and PostgreSQL
 *
 * This function returns detailed version information including:
 * - pg-embedded package version
 * - Embedded PostgreSQL version
 * - Build information
 *
 * @returns Version information object
 *
 * @example
 * ```typescript
 * import { getVersionInfo } from 'pg-embedded';
 *
 * const versionInfo = getVersionInfo();
 * console.log(`Package version: ${versionInfo.packageVersion}`);
 * console.log(`PostgreSQL version: ${versionInfo.postgresqlVersion}`);
 * console.log(`Built for: ${versionInfo.buildInfo.target}`);
 * ```
 */
export declare function getVersionInfo(): VersionInfo

/** Initialize logger */
export declare function initLogger(level?: LogLevel | undefined | null): void

/** PostgreSQL instance state enumeration */
export declare const enum InstanceState {
  /** Stopped */
  Stopped = 0,
  /** Starting */
  Starting = 1,
  /** Running */
  Running = 2,
  /** Stopping */
  Stopping = 3
}

/** Log debug message */
export declare function logDebug(message: string): void

/** Log error message */
export declare function logError(message: string): void

/** Log info message */
export declare function logInfo(message: string): void

/** Log level enumeration */
export declare const enum LogLevel {
  /** Error level */
  Error = 0,
  /** Warning level */
  Warn = 1,
  /** Information level */
  Info = 2,
  /** Debug level */
  Debug = 3,
  /** Trace level */
  Trace = 4
}

/** Log trace message */
export declare function logTrace(message: string): void

/** Log warning message */
export declare function logWarn(message: string): void

/**
 * Options for configuring the `pg_dumpall` command.
 *
 * This interface corresponds to the command-line arguments of the `pg_dumpall` utility.
 *
 * @example
 * ```typescript
 * const dumpallOptions: PgDumpallOptions = {
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *   },
 *   programDir: '/path/to/postgres/bin',
 *   file: 'dump.sql',
 *   globalsOnly: true,
 * };
 * ```
 */
export interface PgDumpallOptions {
  /** Database connection parameters. */
  connection: ConnectionConfig
  /** General tool options. */
  tool?: ToolOptions
  /** The directory containing the `pg_dumpall` executable. */
  programDir: string
  /**
   * Specifies the output file for the dump. If not provided, the output is sent to standard output.
   * Corresponds to the `--file` command-line argument.
   */
  file?: string
  /**
   * Dump only global objects (roles and tablespaces), not databases.
   * Corresponds to the `--globals-only` command-line argument.
   */
  globalsOnly?: boolean
  /**
   * Dump only roles.
   * Corresponds to the `--roles-only` command-line argument.
   */
  rolesOnly?: boolean
  /**
   * Dump only tablespaces.
   * Corresponds to the `--tablespaces-only` command-line argument.
   */
  tablespacesOnly?: boolean
  /**
   * Enable verbose mode.
   * Corresponds to the `--verbose` command-line argument.
   */
  verbose?: boolean
  /**
   * Output commands to `DROP` objects before recreating them.
   * Corresponds to the `--clean` command-line argument.
   */
  clean?: boolean
  /**
   * Do not output commands to set object ownership.
   * Corresponds to the `--no-owner` command-line argument.
   */
  noOwner?: boolean
  /**
   * Do not dump privileges (GRANT/REVOKE commands).
   * Corresponds to the `--no-privileges` command-line argument.
   */
  noPrivileges?: boolean
}

/**
 * Configuration options for the PostgreSQL pg_dump tool.
 *
 * This interface defines all available options for creating database backups using pg_dump.
 * The `connection` and `programDir` fields are required, while other fields are optional
 * and will use pg_dump's default values if not specified.
 *
 * @example
 * ```typescript
 * import { PgDumpTool } from 'pg-embedded';
 *
 * const dumpTool = new PgDumpTool({
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'mydb'
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin',
 *   file: './backup.sql',
 *   create: true,
 *   clean: true
 * });
 *
 * const result = await dumpTool.execute();
 * console.log('Backup completed:', result.exitCode === 0);
 * ```
 */
export interface PgDumpOptions {
  /**
   * Database connection configuration (required).
   * Specifies how to connect to the PostgreSQL server.
   */
  connection: ConnectionConfig
  /** Generic tool options such as silent mode for suppressing output. */
  tool?: ToolOptions
  /**
   * Directory path where the pg_dump executable is located (required).
   * This should point to the directory containing the pg_dump binary.
   */
  programDir: string
  /**
   * Export only table data, excluding schema definitions.
   * Equivalent to pg_dump --data-only flag.
   */
  dataOnly?: boolean
  /**
   * Include DROP statements before CREATE statements in the output.
   * Useful for recreating objects cleanly. Equivalent to pg_dump --clean flag.
   */
  clean?: boolean
  /**
   * Include CREATE DATABASE statement in the dump output.
   * Equivalent to pg_dump --create flag.
   */
  create?: boolean
  /**
   * Export only the specified extension and its dependencies.
   * Equivalent to pg_dump --extension flag.
   */
  extension?: string
  /**
   * Character encoding for the dump output (e.g., 'UTF8', 'LATIN1').
   * Equivalent to pg_dump --encoding flag.
   */
  encoding?: string
  /**
   * Output file path. If not specified, output goes to stdout.
   * Equivalent to pg_dump --file flag.
   */
  file?: string
  /**
   * Output format: 'p' (plain text), 'c' (custom), 'd' (directory), 't' (tar).
   * Default is 'p' (plain text). Equivalent to pg_dump --format flag.
   */
  format?: string
  /**
   * Number of parallel worker processes for dumping (custom format only).
   * Equivalent to pg_dump --jobs flag.
   */
  jobs?: number
  /**
   * Export only objects in the specified schema.
   * Equivalent to pg_dump --schema flag.
   */
  schema?: string
  /**
   * Exclude the specified schema from the dump.
   * Equivalent to pg_dump --exclude-schema flag.
   */
  excludeSchema?: string
  /**
   * Do not output commands to set ownership of objects.
   * Equivalent to pg_dump --no-owner flag.
   */
  noOwner?: boolean
  /**
   * Export only schema definitions, excluding table data.
   * Equivalent to pg_dump --schema-only flag.
   */
  schemaOnly?: boolean
  /**
   * Superuser name to use for disabling triggers during data-only dumps.
   * Equivalent to pg_dump --superuser flag.
   */
  superuser?: string
  /**
   * Export only the specified table and its dependencies.
   * Equivalent to pg_dump --table flag.
   */
  table?: string
  /**
   * Exclude the specified table from the dump.
   * Equivalent to pg_dump --exclude-table flag.
   */
  excludeTable?: string
  /**
   * Enable verbose output showing detailed progress information.
   * Equivalent to pg_dump --verbose flag.
   */
  verbose?: boolean
  /**
   * Do not dump access privileges (GRANT/REVOKE commands).
   * Equivalent to pg_dump --no-privileges flag.
   */
  noPrivileges?: boolean
  /**
   * Compression level (0-9) for compressed output formats.
   * Higher values mean better compression but slower processing.
   * Equivalent to pg_dump --compress flag.
   */
  compression?: number
  /**
   * Generate output suitable for in-place upgrade utilities.
   * This is an advanced option rarely used in normal operations.
   * Equivalent to pg_dump --binary-upgrade flag.
   */
  binaryUpgrade?: boolean
  /**
   * Output data as INSERT commands with explicit column names.
   * Slower than COPY but more portable. Equivalent to pg_dump --column-inserts flag.
   */
  columnInserts?: boolean
  /**
   * Output data as INSERT commands with attribute names (alias for column_inserts).
   * Equivalent to pg_dump --attribute-inserts flag.
   */
  attributeInserts?: boolean
  /**
   * Disable dollar quoting for function bodies, use regular SQL quoting instead.
   * Equivalent to pg_dump --disable-dollar-quoting flag.
   */
  disableDollarQuoting?: boolean
  /**
   * Disable triggers during data restoration to improve performance.
   * Only applies to data-only dumps. Equivalent to pg_dump --disable-triggers flag.
   */
  disableTriggers?: boolean
  /**
   * Enable row-level security policies during the dump.
   * Equivalent to pg_dump --enable-row-security flag.
   */
  enableRowSecurity?: boolean
  /**
   * Output data as INSERT commands instead of COPY commands.
   * Slower but more portable. Equivalent to pg_dump --inserts flag.
   */
  inserts?: boolean
  /**
   * Do not dump object comments and descriptions.
   * Equivalent to pg_dump --no-comments flag.
   */
  noComments?: boolean
  /**
   * Do not dump publication definitions (PostgreSQL 10+).
   * Equivalent to pg_dump --no-publications flag.
   */
  noPublications?: boolean
  /**
   * Do not dump security label assignments.
   * Equivalent to pg_dump --no-security-labels flag.
   */
  noSecurityLabels?: boolean
  /**
   * Do not dump subscription definitions (PostgreSQL 10+).
   * Equivalent to pg_dump --no-subscriptions flag.
   */
  noSubscriptions?: boolean
  /**
   * Do not dump table access method assignments.
   * Equivalent to pg_dump --no-table-access-method flag.
   */
  noTableAccessMethod?: boolean
  /**
   * Do not dump tablespace assignments.
   * Equivalent to pg_dump --no-tablespaces flag.
   */
  noTablespaces?: boolean
  /**
   * Do not dump TOAST compression method assignments.
   * Equivalent to pg_dump --no-toast-compression flag.
   */
  noToastCompression?: boolean
  /**
   * Do not dump data from unlogged tables.
   * Unlogged tables are not crash-safe and are automatically truncated on server restart.
   * Equivalent to pg_dump --no-unlogged-table-data flag.
   */
  noUnloggedTableData?: boolean
  /**
   * Add ON CONFLICT DO NOTHING clause to INSERT commands.
   * Helps avoid errors when restoring to a database with existing data.
   * Equivalent to pg_dump --on-conflict-do-nothing flag.
   */
  onConflictDoNothing?: boolean
  /**
   * Quote all database object identifiers, even if not required.
   * Ensures compatibility across different PostgreSQL versions.
   * Equivalent to pg_dump --quote-all-identifiers flag.
   */
  quoteAllIdentifiers?: boolean
  /**
   * Number of rows to include in each INSERT command when using --inserts.
   * Higher values can improve performance but may hit command length limits.
   * Equivalent to pg_dump --rows-per-insert flag.
   */
  rowsPerInsert?: number
  /**
   * Use a specific snapshot for the dump to ensure consistency.
   * The snapshot must be exported by another session.
   * Equivalent to pg_dump --snapshot flag.
   */
  snapshot?: string
  /**
   * Use strict naming conventions for database objects.
   * Equivalent to pg_dump --strict-names flag.
   */
  strictNames?: boolean
  /**
   * Use SET SESSION AUTHORIZATION commands instead of ALTER OWNER commands.
   * Useful when the dumping user doesn't have ownership privileges.
   * Equivalent to pg_dump --use-set-session-authorization flag.
   */
  useSetSessionAuthorization?: boolean
}

export type PgEmbedError =
  | { type: 'SetupError', field0: string }
  | { type: 'StartError', field0: string }
  | { type: 'StopError', field0: string }
  | { type: 'DatabaseError', field0: string }
  | { type: 'ConfigurationError', field0: string }
  | { type: 'ConnectionError', field0: string }
  | { type: 'TimeoutError', field0: string }
  | { type: 'ToolError', field0: string }
  | { type: 'InternalError', field0: string }

/**
 * Options for configuring the `pg_isready` tool.
 *
 * The `connection` and `programDir` fields are required for proper operation.
 *
 * @example
 * ```typescript
 * const options = {
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'mydb'
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin',
 *   timeout: 10
 * };
 * ```
 */
export interface PgIsReadyOptions {
  /** Connection settings for the PostgreSQL server (required). */
  connection: ConnectionConfig
  /** The number of seconds to wait for a connection. */
  timeout?: number
  /** If `true`, suppresses status messages. */
  silent?: boolean
  /** The specific database name to check. */
  dbname?: string
  /** The directory where the `pg_isready` executable is located (required). */
  programDir: string
}

/**
 * Options for the `pg_restore` tool.
 * @see https://www.postgresql.org/docs/current/app-pgrestore.html
 */
export interface PgRestoreOptions {
  /**
   * Connection configuration for the PostgreSQL server.
   * @type {ConnectionConfig}
   */
  connection: ConnectionConfig
  /**
   * The path to the dump file.
   * @type {string}
   */
  file: string
  /**
   * The format of the archive.
   * @type {string | undefined}
   */
  format?: string
  /**
   * Clean (drop) database objects before recreating them.
   * @type {boolean}
   */
  clean: boolean
  /**
   * Create the database before restoring into it.
   * @type {boolean}
   */
  create: boolean
  /**
   * Exit on error.
   * @type {boolean}
   */
  exitOnError: boolean
  /**
   * Number of concurrent jobs.
   * @type {number | undefined}
   */
  jobs?: number
  /**
   * Execute as a single transaction.
   * @type {boolean}
   */
  singleTransaction: boolean
  /**
   * Verbose mode.
   * @type {boolean}
   */
  verbose: boolean
  /**
   * The name of the database to restore into.
   * @type {string | undefined}
   */
  dbName?: string
  /**
   * Restore only the data, not the schema.
   * @type {boolean}
   */
  dataOnly: boolean
  /**
   * Restore only the schema, not the data.
   * @type {boolean}
   */
  schemaOnly: boolean
  /**
   * Superuser name to use for disabling triggers.
   * @type {string | undefined}
   */
  superuser?: string
  /**
   * Restore only the specified table(s).
   * @type {string[]}
   */
  table: Array<string>
  /**
   * Restore only the specified trigger(s).
   * @type {string[]}
   */
  trigger: Array<string>
  /**
   * Do not restore ownership of objects.
   * @type {boolean}
   */
  noOwner: boolean
  /**
   * Do not restore privileges (grant/revoke).
   * @type {boolean}
   */
  noPrivileges: boolean
  /**
   * The directory where the `pg_restore` program is located.
   * @type {string | undefined}
   */
  programDir?: string
}

/** PostgreSQL error type enumeration */
export declare const enum PostgresError {
  /** Setup error */
  SetupError = 0,
  /** Start error */
  StartError = 1,
  /** Stop error */
  StopError = 2,
  /** Database operation error */
  DatabaseError = 3,
  /** Configuration error */
  ConfigurationError = 4,
  /** Connection error */
  ConnectionError = 5,
  /** Timeout error */
  TimeoutError = 6,
  /** Tool error */
  ToolError = 7
}

/** PostgreSQL error information structure */
export interface PostgresErrorInfo {
  /** Error type */
  errorType: PostgresError
  /** Error message */
  message: string
  /** Error details */
  details?: string
}

/**
 * PostgreSQL configuration settings
 *
 * This object defines all the configuration options for a PostgreSQL embedded instance.
 * All fields are optional and will use sensible defaults if not provided.
 *
 * @example
 * ```typescript
 * const settings: PostgresSettings = {
 *   port: 5432,
 *   username: 'postgres',
 *   password: 'mypassword',
 *   persistent: false
 * };
 * ```
 */
export interface PostgresSettings {
  /** PostgreSQL version (e.g., "15.0", ">=14.0")  */
  version?: string
  /** Host address for database connection (default: "localhost")  */
  host?: string
  /** Port number (0-65535, default: 5432, 0 for random)  */
  port?: number
  /** Username for database connection (default: "postgres")  */
  username?: string
  /** Password for database connection (default: "postgres")  */
  password?: string
  /** Default database name (default: "postgres")  */
  databaseName?: string
  /** Custom data directory path  */
  dataDir?: string
  /** Custom installation directory path  */
  installationDir?: string
  /** Timeout in seconds for database operations (default: 30)  */
  timeout?: number
  /** Setup timeout in seconds for PostgreSQL initialization (default: 300 on Windows, 30 on other platforms)  */
  setupTimeout?: number
  /** Whether to persist data between runs (default: false)  */
  persistent?: boolean
}

/**
 * Options for configuring the `psql` tool, primarily for connection settings.
 *
 * The `connection` and `programDir` fields are required for proper operation.
 *
 * @example
 * ```typescript
 * const options = {
 *   connection: {
 *     host: 'localhost',
 *     port: 5432,
 *     username: 'postgres',
 *     password: 'password',
 *     database: 'testdb',
 *   },
 *   programDir: '/home/postgresql/17.5.0/bin',
 *   variables: ['MY_VAR=some_value', 'COUNT=42'],
 *   flags: ['--csv', '--single-transaction', '--tuples-only'],
 * };
 * ```
 */
export interface PsqlOptions {
  /** Connection settings for the PostgreSQL server (required). */
  connection: ConnectionConfig
  /** Generic tool options like silent mode. */
  tool?: ToolOptions
  /**
   * Variables to set for the psql session in KEY=VALUE format.
   * For example, `['MY_VAR=hello', 'COUNT=42']`.
   * Each string should be in the format 'NAME=VALUE'.
   */
  variables?: Array<string>
  /**
   * A list of boolean flags to pass to `psql`.
   * For example, `['--csv', '--tuples-only']`.
   */
  flags?: Array<string>
  /** The directory where the psql executable is located (required). */
  programDir: string
}

/**
 * Generic options for a tool execution.
 *
 * These are common options that apply to all PostgreSQL tools,
 * separate from connection-specific settings.
 */
export interface ToolOptions {
  /** Timeout for the tool execution in seconds. */
  timeout?: number
  /** If true, suppresses tool output. */
  silent?: boolean
}

/** The result of a tool execution. */
export interface ToolResult {
  /** The exit code of the tool. */
  exitCode: number
  /** The standard output of the tool. */
  stdout: string
  /** The standard error of the tool. */
  stderr: string
  command: Array<string>
}

/** Version information for the pg-embedded package and embedded PostgreSQL */
export interface VersionInfo {
  /** The version of the pg-embedded npm package */
  packageVersion: string
  /** The version of the embedded PostgreSQL binary */
  postgresqlVersion: string
  /** The version of the postgresql_embedded Rust crate */
  postgresqlEmbeddedVersion: string
  /** Build information */
  buildInfo: BuildInfo
}
