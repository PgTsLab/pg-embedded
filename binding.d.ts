/* auto-generated by NAPI-RS */
/* eslint-disable */
/** Connection information structure */
export declare class ConnectionInfo {
  /** Host address */
  host: string
  /** Port number */
  port: number
  /** Username */
  username: string
  /** Password */
  password: string
  /** Database name */
  databaseName: string
  /** Connection string */
  connectionString: string
  /** Generate a safe connection string without password (for logging) */
  safeConnectionString(): string
  /** Generate JDBC format connection string */
  jdbcUrl(): string
}

/**
 * PostgreSQL embedded instance manager
 *
 * This class provides a high-level interface for managing embedded PostgreSQL instances.
 * It supports both synchronous and asynchronous operations, automatic resource management,
 * and connection caching for optimal performance.
 *
 * @example
 * ```typescript
 * import { PostgresInstance } from 'pg-embedded';
 *
 * const instance = new PostgresInstance({
 *   port: 5432,
 *   username: 'postgres',
 *   password: 'password'
 * });
 *
 * await instance.start();
 * await instance.createDatabase('mydb');
 * await instance.stop();
 * ```
 */
export declare class PostgresInstance {
  /**
   * Creates a new PostgreSQL instance with the specified settings
   *
   * @param settings - Configuration settings for the PostgreSQL instance
   * @returns A new PostgresInstance
   *
   * @example
   * ```typescript
   * const instance = new PostgresInstance({
   *   port: 5432,
   *   username: 'postgres',
   *   password: 'password',
   *   persistent: false
   * });
   * ```
   */
  constructor(settings?: PostgresSettings | undefined | null)
  /**
   * Gets the unique instance ID
   *
   * @returns The unique identifier for this PostgreSQL instance
   */
  get instanceId(): string
  /**
   * Gets the current state of the PostgreSQL instance
   *
   * @returns The current instance state (Stopped, Starting, Running, or Stopping)
   */
  get state(): InstanceState
  /**
   * Gets the connection information for the PostgreSQL instance
   *
   * This method returns cached connection information when available for better performance.
   * The cache is automatically invalidated after 5 minutes.
   *
   * @returns Connection information including host, port, username, and connection string
   * @throws Error if the instance is not running
   */
  get connectionInfo(): ConnectionInfo
  /**
   * Checks if the PostgreSQL instance is healthy and running
   *
   * @returns true if the instance is running and healthy, false otherwise
   */
  isHealthy(): boolean
  /**
   * # Safety
   * Sets up the PostgreSQL instance asynchronously
   *
   * This method initializes the PostgreSQL instance but does not start it.
   * It's automatically called by start() if needed.
   *
   * @returns Promise that resolves when setup is complete
   * @throws Error if setup fails
   */
  setup(): Promise<void>
  /**
   * # Safety
   * Starts the PostgreSQL instance asynchronously
   *
   * This method starts the PostgreSQL server and makes it ready to accept connections.
   * It includes automatic setup if the instance hasn't been set up yet.
   *
   * @returns Promise that resolves when the instance is started and ready
   * @throws Error if the instance is already running or if startup fails
   *
   * @example
   * ```typescript
   * await instance.start();
   * console.log('PostgreSQL is ready!');
   * ```
   */
  start(): Promise<void>
  /**
   * # Safety
   * Stops the PostgreSQL instance asynchronously
   *
   * This method gracefully shuts down the PostgreSQL server.
   *
   * @returns Promise that resolves when the instance is stopped
   * @throws Error if the instance is already stopped or if stopping fails
   *
   * @example
   * ```typescript
   * await instance.stop();
   * console.log('PostgreSQL stopped');
   * ```
   */
  stop(): Promise<void>
  /**
   * # Safety
   * Creates a new database asynchronously
   *
   * @param name - The name of the database to create
   * @returns Promise that resolves when the database is created
   * @throws Error if the instance is not running or if database creation fails
   *
   * @example
   * ```typescript
   * await instance.createDatabase('myapp');
   * ```
   */
  createDatabase(name: string): Promise<void>
  /**
   * # Safety
   * Drops (deletes) a database asynchronously
   *
   * @param name - The name of the database to drop
   * @returns Promise that resolves when the database is dropped
   * @throws Error if the instance is not running or if database deletion fails
   *
   * @example
   * ```typescript
   * await instance.dropDatabase('myapp');
   * ```
   */
  dropDatabase(name: string): Promise<void>
  /**
   * Checks if a database exists asynchronously
   *
   * @param name - The name of the database to check
   * @returns Promise that resolves to true if the database exists, false otherwise
   * @throws Error if the instance is not running or if the check fails
   *
   * @example
   * ```typescript
   * const exists = await instance.databaseExists('myapp');
   * if (exists) {
   *   console.log('Database exists');
   * }
   * ```
   */
  databaseExists(name: string): Promise<boolean>
  /**
   * # Safety
   * Starts the PostgreSQL instance asynchronously with a timeout
   *
   * @param timeout_seconds - Maximum time to wait for startup in seconds
   * @returns Promise that resolves when the instance is started and ready
   * @throws Error if the instance is already running, if startup fails, or if timeout is exceeded
   *
   * @example
   * ```typescript
   * await instance.startWithTimeout(30); // 30 second timeout
   * ```
   */
  startWithTimeout(timeoutSeconds: number): Promise<void>
  /**
   * # Safety
   * Stops the PostgreSQL instance asynchronously with a timeout
   *
   * @param timeout_seconds - Maximum time to wait for shutdown in seconds
   * @returns Promise that resolves when the instance is stopped
   * @throws Error if the instance is already stopped, if stopping fails, or if timeout is exceeded
   *
   * @example
   * ```typescript
   * await instance.stopWithTimeout(10); // 10 second timeout
   * ```
   */
  stopWithTimeout(timeoutSeconds: number): Promise<void>
  /**
   * Gets the startup time of the PostgreSQL instance in seconds
   *
   * This method returns the time it took for the last successful start operation.
   *
   * @returns The startup time in seconds, or null if the instance hasn't been started yet
   *
   * @example
   * ```typescript
   * await instance.start();
   * const startupTime = instance.getStartupTime();
   * console.log(`Started in ${startupTime} seconds`);
   * ```
   */
  getStartupTime(): number | null
  /**
   * Gets the configuration hash for this instance
   *
   * This hash is used internally for caching and can be useful for debugging.
   *
   * @returns A string hash of the instance configuration
   */
  getConfigHash(): string
  /**
   * Clears the connection information cache
   *
   * This forces the next call to connectionInfo to regenerate the connection information.
   *
   * @returns void
   */
  clearConnectionCache(): void
  /**
   * Checks if the connection information cache is valid
   *
   * The cache is considered valid if it exists and is less than 5 minutes old.
   *
   * @returns true if the cache is valid, false otherwise
   */
  isConnectionCacheValid(): boolean
  /**
   * Gets the PostgreSQL version used by this instance
   *
   * @returns PostgreSQL version string (e.g., "15.4")
   *
   * @example
   * ```typescript
   * const version = instance.getPostgreSQLVersion();
   * console.log(`Using PostgreSQL ${version}`);
   * ```
   */
  getPostgreSqlVersion(): string
  /**
   * # Safety
   * Manually cleans up all resources associated with this instance
   *
   * This method stops the PostgreSQL instance (if running) and cleans up all resources.
   * It's automatically called when the instance is dropped, but can be called manually
   * for immediate cleanup.
   *
   * @returns void
   *
   * @example
   * ```typescript
   * await instance.cleanup();
   * console.log('Resources cleaned up');
   * ```
   */
  cleanup(): Promise<void>
  /**
   * Executes a SQL command against the PostgreSQL instance
   *
   * This method uses the psql command-line tool to execute SQL statements.
   * The instance must be running before executing SQL commands.
   *
   * @param sql - The SQL command to execute
   * @param database - Optional database name (defaults to "postgres")
   * @returns Promise that resolves to an object containing stdout and stderr
   * @throws Error if the instance is not running or if SQL execution fails
   *
   * @example
   * ```typescript
   * const result = await instance.executeSql('SELECT version();');
   * console.log('Query result:', result.stdout);
   *
   * // Execute on specific database
   * const result2 = await instance.executeSql('SELECT * FROM users;', 'myapp');
   * ```
   */
  executeSql(sql: string, database?: string | undefined | null): Promise<SqlResult>
  /**
   * Executes a SQL file against the PostgreSQL instance
   *
   * This method reads and executes a SQL file using the psql command-line tool.
   * The instance must be running before executing SQL files.
   *
   * @param file_path - Path to the SQL file to execute
   * @param database - Optional database name (defaults to "postgres")
   * @returns Promise that resolves to an object containing stdout and stderr
   * @throws Error if the instance is not running, file doesn't exist, or execution fails
   *
   * @example
   * ```typescript
   * const result = await instance.executeSqlFile('./schema.sql');
   * console.log('Schema created:', result.success);
   *
   * // Execute on specific database
   * const result2 = await instance.executeSqlFile('./data.sql', 'myapp');
   * ```
   */
  executeSqlFile(filePath: string, database?: string | undefined | null): Promise<SqlResult>
  /**
   * Executes a SQL query and returns structured JSON results
   *
   * This method executes a SQL query and attempts to parse the results as JSON.
   * It's particularly useful for SELECT queries where you want structured data.
   *
   * @param sql - The SQL query to execute
   * @param database - Optional database name (defaults to "postgres")
   * @returns Promise that resolves to a StructuredSqlResult with parsed JSON data
   * @throws Error if the instance is not running or if SQL execution fails
   *
   * @example
   * ```typescript
   * const result = await instance.executeSqlStructured('SELECT * FROM users;');
   * if (result.success && result.data) {
   *   const users = JSON.parse(result.data);
   *   console.log('Users:', users);
   * }
   * ```
   */
  executeSqlStructured(sql: string, database?: string | undefined | null): Promise<StructuredSqlResult>
  /**
   * Executes a SQL query and returns results as JSON array
   *
   * This is a convenience method that directly returns JSON-formatted results.
   * It uses PostgreSQL's built-in JSON functions for better performance.
   *
   * @param sql - The SQL query to execute (should be a SELECT statement)
   * @param database - Optional database name (defaults to "postgres")
   * @returns Promise that resolves to a StructuredSqlResult with JSON array data
   * @throws Error if the instance is not running or if SQL execution fails
   *
   * @example
   * ```typescript
   * const result = await instance.executeSqlJson('SELECT id, name FROM users LIMIT 10;');
   * if (result.success && result.data) {
   *   const users = JSON.parse(result.data);
   *   console.log('Users:', users);
   * }
   * ```
   */
  executeSqlJson(sql: string, database?: string | undefined | null): Promise<StructuredSqlResult>
}

/** SQL execution result structure */
export declare class SqlResult {
  /** Standard output from the SQL command */
  stdout: string
  /** Standard error from the SQL command */
  stderr: string
  /** Whether the execution was successful */
  success: boolean
}

/** Structured SQL execution result with parsed JSON data */
export declare class StructuredSqlResult {
  /** Parsed JSON data from the SQL query result */
  data?: string
  /** Raw standard output from the SQL command */
  stdout: string
  /** Standard error from the SQL command */
  stderr: string
  /** Whether the execution was successful */
  success: boolean
  /** Number of rows returned (0 if not applicable) */
  rowCount: number
}

/** Build information */
export interface BuildInfo {
  /** Target platform (e.g., "x86_64-apple-darwin") */
  target: string
  /** Build profile (debug or release) */
  profile: string
  /** Rust compiler version used for build */
  rustcVersion: string
  /** Build timestamp */
  buildTimestamp: string
}

/**
 * Gets the package version of pg-embedded
 *
 * @returns Package version string (e.g., "1.0.0")
 *
 * @example
 * ```typescript
 * import { getPackageVersion } from 'pg-embedded';
 *
 * const version = getPackageVersion();
 * console.log(`pg-embedded version: ${version}`);
 * ```
 */
export declare function getPackageVersion(): string

/**
 * Gets the version of the embedded PostgreSQL binary
 *
 * @returns PostgreSQL version string (e.g., "15.4")
 *
 * @example
 * ```typescript
 * import { getPostgreSQLVersion } from 'pg-embedded';
 *
 * const pgVersion = getPostgreSQLVersion();
 * console.log(`Using PostgreSQL ${pgVersion}`);
 * ```
 */
export declare function getPostgreSqlVersion(): string

/**
 * Gets comprehensive version information about pg-embedded and PostgreSQL
 *
 * This function returns detailed version information including:
 * - pg-embedded package version
 * - Embedded PostgreSQL version
 * - Build information
 *
 * @returns Version information object
 *
 * @example
 * ```typescript
 * import { getVersionInfo } from 'pg-embedded';
 *
 * const versionInfo = getVersionInfo();
 * console.log(`Package version: ${versionInfo.packageVersion}`);
 * console.log(`PostgreSQL version: ${versionInfo.postgresqlVersion}`);
 * console.log(`Built for: ${versionInfo.buildInfo.target}`);
 * ```
 */
export declare function getVersionInfo(): VersionInfo

/** Initialize logger */
export declare function initLogger(level?: LogLevel | undefined | null): void

/** PostgreSQL instance state enumeration */
export declare const enum InstanceState {
  /** Stopped */
  Stopped = 0,
  /** Starting */
  Starting = 1,
  /** Running */
  Running = 2,
  /** Stopping */
  Stopping = 3,
}

/** Log debug message */
export declare function logDebug(message: string): void

/** Log error message */
export declare function logError(message: string): void

/** Log info message */
export declare function logInfo(message: string): void

/** Log level enumeration */
export declare const enum LogLevel {
  /** Error level */
  Error = 0,
  /** Warning level */
  Warn = 1,
  /** Information level */
  Info = 2,
  /** Debug level */
  Debug = 3,
  /** Trace level */
  Trace = 4,
}

/** Log trace message */
export declare function logTrace(message: string): void

/** Log warning message */
export declare function logWarn(message: string): void

/** PostgreSQL error type enumeration */
export declare const enum PostgresError {
  /** Setup error */
  SetupError = 0,
  /** Start error */
  StartError = 1,
  /** Stop error */
  StopError = 2,
  /** Database operation error */
  DatabaseError = 3,
  /** Configuration error */
  ConfigurationError = 4,
  /** Connection error */
  ConnectionError = 5,
  /** Timeout error */
  TimeoutError = 6,
}

/** PostgreSQL error information structure */
export interface PostgresErrorInfo {
  /** Error type */
  errorType: PostgresError
  /** Error message */
  message: string
  /** Error details */
  details?: string
}

/**
 * PostgreSQL configuration settings
 *
 * This object defines all the configuration options for a PostgreSQL embedded instance.
 * All fields are optional and will use sensible defaults if not provided.
 *
 * @example
 * ```typescript
 * const settings: PostgresSettings = {
 *   port: 5432,
 *   username: 'postgres',
 *   password: 'mypassword',
 *   persistent: false
 * };
 * ```
 */
export interface PostgresSettings {
  /** PostgreSQL version (e.g., "15.0", ">=14.0")  */
  version?: string
  /** Host address for database connection (default: "localhost")  */
  host?: string
  /** Port number (0-65535, default: 5432, 0 for random)  */
  port?: number
  /** Username for database connection (default: "postgres")  */
  username?: string
  /** Password for database connection (default: "postgres")  */
  password?: string
  /** Default database name (default: "postgres")  */
  databaseName?: string
  /** Custom data directory path  */
  dataDir?: string
  /** Custom installation directory path  */
  installationDir?: string
  /** Timeout in seconds for database operations (default: 30)  */
  timeout?: number
  /** Setup timeout in seconds for PostgreSQL initialization (default: 300 on Windows, 30 on other platforms)  */
  setupTimeout?: number
  /** Whether to persist data between runs (default: false)  */
  persistent?: boolean
}

/** Version information for the pg-embedded package and embedded PostgreSQL */
export interface VersionInfo {
  /** The version of the pg-embedded npm package */
  packageVersion: string
  /** The version of the embedded PostgreSQL binary */
  postgresqlVersion: string
  /** The version of the postgresql_embedded Rust crate */
  postgresqlEmbeddedVersion: string
  /** Build information */
  buildInfo: BuildInfo
}
