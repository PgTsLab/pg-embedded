name: CI
env:
  DEBUG: napi:*
  APP_NAME: pg-embeded
  MACOSX_DEPLOYMENT_TARGET: '10.13'
  CARGO_INCREMENTAL: '1'
permissions:
  contents: write
  id-token: write
'on':
  push:
    branches:
      - main
    tags-ignore:
      - '**'
    paths-ignore:
      - '**/*.md'
      - LICENSE
      - '**/*.gitignore'
      - .editorconfig
      - docs/**
  pull_request: null
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      POSTGRESQL_VERSION: '17.5'
      POSTGRESQL_RELEASES_URL: 'https://github.com/theseus-rs/postgresql-binaries'
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.13.1'
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Install dependencies
        run: pnpm install

      - name: Oxlint
        run: pnpm lint

      - name: Cargo fmt
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy

  build:
    strategy:
      fail-fast: false
      matrix:
        settings:
          # - host: macos-latest
          #   target: x86_64-apple-darwin
          #   build: pnpm build --target x86_64-apple-darwin
          - host: windows-latest
            build: pnpm build --target x86_64-pc-windows-msvc
            target: x86_64-pc-windows-msvc
          - host: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            build: pnpm build --target x86_64-unknown-linux-gnu
          # - host: ubuntu-latest
          #   target: x86_64-unknown-linux-musl
          #   build: pnpm build --target x86_64-unknown-linux-musl -x
          - host: macos-latest
            target: aarch64-apple-darwin
            build: pnpm build --target aarch64-apple-darwin
          - host: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          #   build: pnpm build --target aarch64-unknown-linux-gnu --use-napi-cross
          # - host: ubuntu-latest
          #   target: armv7-unknown-linux-gnueabihf
          #   build: pnpm build --target armv7-unknown-linux-gnueabihf --use-napi-cross
          # - host: ubuntu-latest
          #   target: aarch64-linux-android
          #   build: pnpm build --target aarch64-linux-android
          # - host: ubuntu-latest
          #   target: armv7-linux-androideabi
          #   build: pnpm build --target armv7-linux-androideabi
          # - host: ubuntu-latest
          #   target: aarch64-unknown-linux-musl
          #   build: pnpm build --target aarch64-unknown-linux-musl -x
    name: stable - ${{ matrix.settings.target }} - node@20
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.13.1'
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: pnpm
          cache-dependency-path: 'pnpm-lock.yaml'
      - name: Install
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.settings.target }}
      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            ~/.napi-rs
            .cargo-cache
            target/
          key: ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ matrix.settings.target }}-cargo-${{ matrix.settings.host }}-
      - uses: goto-bus-stop/setup-zig@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        with:
          version: 0.13.0
      - name: Install cargo-zigbuild
        uses: taiki-e/install-action@v2
        if: ${{ contains(matrix.settings.target, 'musl') }}
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tool: cargo-zigbuild
      - name: Setup toolchain
        run: ${{ matrix.settings.setup }}
        if: ${{ matrix.settings.setup }}
        shell: bash
      - name: Install system dependencies
        if: ${{ matrix.settings.host == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
      - name: Install ARM64 cross-compilation tools
        if: ${{ matrix.settings.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      - name: Set ARM64 environment variables
        if: ${{ matrix.settings.target == 'aarch64-unknown-linux-gnu' }}
        run: |
          echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
          echo "AR_aarch64_unknown_linux_gnu=aarch64-linux-gnu-ar" >> $GITHUB_ENV
          echo "CFLAGS_aarch64_unknown_linux_gnu=-D__ARM_ARCH=8 -march=armv8-a" >> $GITHUB_ENV
          echo "CXXFLAGS_aarch64_unknown_linux_gnu=-D__ARM_ARCH=8 -march=armv8-a" >> $GITHUB_ENV
      - name: Install dependencies
        run: pnpm install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Build
        run: |
          for i in {1..3}; do
            echo "Build attempt $i..."
            if ${{ matrix.settings.build }}; then
              echo "Build successful!"
              break
            else
              echo "Build attempt $i failed"
              if [ $i -lt 3 ]; then
                echo "Retrying in 30 seconds..."
                sleep 30
              else
                echo "All build attempts failed"
                exit 1
              fi
            fi
          done
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          POSTGRESQL_VERSION: '17.5'
          POSTGRESQL_RELEASES_URL: 'https://github.com/theseus-rs/postgresql-binaries'
          OPENSSL_STATIC: '1'
          OPENSSL_VENDORED: '1'
          OPENSSL_NO_PKG_CONFIG: '1'
          PKG_CONFIG_ALLOW_CROSS: '1'
      - name: List generated files
        run: |
          echo "Files in current directory:"
          ls -la
          echo "Looking for .node files:"
          find . -name "*.node" -type f || echo "No .node files found"
        shell: bash
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: '*.node'
          if-no-files-found: error

  test-macOS-windows-binding:
    name: Test bindings on ${{ matrix.settings.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        settings:
          - host: windows-latest
            target: x86_64-pc-windows-msvc
            architecture: x64
          # - host: macos-latest
          #   target: x86_64-apple-darwin
          #   architecture: x64
          - host: macos-latest
            target: aarch64-apple-darwin
            architecture: arm64
        node:
          - '20'
    runs-on: ${{ matrix.settings.host }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.13.1'
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: 'pnpm-lock.yaml'
          architecture: ${{ matrix.settings.architecture }}
      - name: Install dependencies
        run: pnpm install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.settings.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Test bindings
        # run: pnpm test
        run: pnpm test:basic
  test-linux-binding:
    name: Test ${{ matrix.target }} - node@${{ matrix.node }}
    needs:
      - build
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          # - x86_64-unknown-linux-musl
          # - aarch64-unknown-linux-gnu
          # - aarch64-unknown-linux-musl
          # - armv7-unknown-linux-gnueabihf
        node:
          - '20'
    runs-on: ${{ contains(matrix.target, 'aarch64') && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    steps:
      - uses: actions/checkout@v4
      - name: setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10.13.1'
      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: pnpm
          cache-dependency-path: 'pnpm-lock.yaml'
      - name: Output docker params
        id: docker
        run: |
          node -e "
            if ('${{ matrix.target }}'.startsWith('aarch64')) {
              console.log('PLATFORM=linux/arm64')
            } else if ('${{ matrix.target }}'.startsWith('armv7')) {
              console.log('PLATFORM=linux/arm/v7')
            } else {
              console.log('PLATFORM=linux/amd64')
            }
          " >> $GITHUB_OUTPUT
          node -e "
            if ('${{ matrix.target }}'.endsWith('-musl')) {
              console.log('IMAGE=node:${{ matrix.node }}-alpine')
            } else {
              console.log('IMAGE=node:${{ matrix.node }}-slim')
            }
          " >> $GITHUB_OUTPUT
          echo "PNPM_STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      # use --force to download the all platform/arch dependencies
      - name: Install dependencies
        run: pnpm install --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: bindings-${{ matrix.target }}
          path: .
      - name: List packages
        run: ls -R .
        shell: bash
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ contains(matrix.target, 'armv7') }}
        with:
          platforms: all
      - run: docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        if: ${{ contains(matrix.target, 'armv7') }}
      - name: Test bindings
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ steps.docker.outputs.IMAGE }}
          options: -v ${{ steps.docker.outputs.PNPM_STORE_PATH }}:${{ steps.docker.outputs.PNPM_STORE_PATH }} -v ${{ github.workspace }}:${{ github.workspace }} -w ${{ github.workspace }} --platform ${{ steps.docker.outputs.PLATFORM }}
          # run: npm i -g corepack && corepack enable && pnpm test
          run: npm i -g corepack && corepack enable && pnpm test:basic
  # publish:
  #   name: Publish
  #   runs-on: ubuntu-latest
  #   needs:
  #     - lint
  #     - test-macOS-windows-binding
  #     - test-linux-binding
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: setup pnpm
  #       uses: pnpm/action-setup@v4
  #       with:
  #         version: "10.13.1"
  #     - name: Setup node
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #         cache: pnpm
  #         cache-dependency-path: "pnpm-lock.yaml"
  #     - name: Install dependencies
  #       run: pnpm install
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Download all artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         path: artifacts
  #     - name: create npm dirs
  #       run: pnpm napi create-npm-dirs
  #     - name: Move artifacts
  #       run: pnpm artifacts
  #     - name: List packages
  #       run: ls -R ./npm
  #       shell: bash
  #     - name: Publish
  #       run: |
  #         npm config set provenance true
  #         if git log -1 --pretty=%B | grep "^chore: release v[0-9]\+\.[0-9]\+\.[0-9]\+$";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --access public
  #           echo "Published stable release"
  #         elif git log -1 --pretty=%B | grep "^chore: release v[0-9]\+\.[0-9]\+\.[0-9]\+-";
  #         then
  #           echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> ~/.npmrc
  #           npm publish --tag next --access public
  #           echo "Published pre-release"
  #         else
  #           echo "Not a release commit, skipping publish"
  #         fi
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #         NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
