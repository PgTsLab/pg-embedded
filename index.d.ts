/* auto-generated by NAPI-RS */
/* eslint-disable */
/** 连接信息结构体 */
export declare class ConnectionInfo {
  /** 主机地址 */
  host: string
  /** 端口号 */
  port: number
  /** 用户名 */
  username: string
  /** 密码 */
  password: string
  /** 数据库名 */
  databaseName: string
  /** 连接字符串 */
  connectionString: string
  /** 生成不包含密码的安全连接字符串（用于日志记录） */
  safeConnectionString(): string
  /** 生成 JDBC 格式的连接字符串 */
  jdbcUrl(): string
}

/** PostgreSQL 实例管理器 */
export declare class PostgresInstance {
  /** 构造函数 */
  constructor(settings?: PostgresSettings | undefined | null)
  /** 获取实例ID */
  get instanceId(): string
  /** 获取当前状态 */
  get state(): InstanceState
  /** 获取连接信息（带缓存优化） */
  get connectionInfo(): ConnectionInfo
  /** 检查实例是否健康 */
  isHealthy(): boolean
  /** 异步设置方法 */
  setup(): Promise<void>
  /** 异步启动方法（优化版本） */
  start(): Promise<void>
  /** 异步停止方法 */
  stop(): Promise<void>
  /** 异步创建数据库 */
  createDatabase(name: string): Promise<void>
  /** 异步删除数据库 */
  dropDatabase(name: string): Promise<void>
  /** 异步检查数据库是否存在 */
  databaseExists(name: string): Promise<boolean>
  /** 同步设置方法 */
  setupSync(): void
  /** 同步启动方法 */
  startSync(): void
  /** 同步停止方法 */
  stopSync(): void
  /** 同步创建数据库 */
  createDatabaseSync(name: string): void
  /** 同步删除数据库 */
  dropDatabaseSync(name: string): void
  /** 同步检查数据库是否存在 */
  databaseExistsSync(name: string): boolean
  /** 带超时的异步启动方法 */
  startWithTimeout(timeoutSeconds: number): Promise<void>
  /** 带超时的异步停止方法 */
  stopWithTimeout(timeoutSeconds: number): Promise<void>
  /** 获取启动时间（用于性能监控） */
  getStartupTime(): number | null
  /** 获取配置哈希（用于缓存键） */
  getConfigHash(): string
  /** 清除连接信息缓存 */
  clearConnectionCache(): void
  /** 检查连接信息缓存是否有效 */
  isConnectionCacheValid(): boolean
  /** 清理资源的方法 */
  cleanup(): void
}

/** 初始化日志记录器 */
export declare function initLogger(level?: LogLevel | undefined | null): void

/** PostgreSQL 实例状态枚举 */
export declare const enum InstanceState {
  /** 已停止 */
  Stopped = 0,
  /** 启动中 */
  Starting = 1,
  /** 运行中 */
  Running = 2,
  /** 停止中 */
  Stopping = 3
}

/** 记录调试日志 */
export declare function logDebug(message: string): void

/** 记录错误日志 */
export declare function logError(message: string): void

/** 记录信息日志 */
export declare function logInfo(message: string): void

/** 日志级别枚举 */
export declare const enum LogLevel {
  /** 错误级别 */
  Error = 0,
  /** 警告级别 */
  Warn = 1,
  /** 信息级别 */
  Info = 2,
  /** 调试级别 */
  Debug = 3,
  /** 跟踪级别 */
  Trace = 4
}

/** 记录跟踪日志 */
export declare function logTrace(message: string): void

/** 记录警告日志 */
export declare function logWarn(message: string): void

/** PostgreSQL 错误类型枚举 */
export declare const enum PostgresError {
  /** 设置错误 */
  SetupError = 0,
  /** 启动错误 */
  StartError = 1,
  /** 停止错误 */
  StopError = 2,
  /** 数据库操作错误 */
  DatabaseError = 3,
  /** 配置错误 */
  ConfigurationError = 4,
  /** 连接错误 */
  ConnectionError = 5,
  /** 超时错误 */
  TimeoutError = 6
}

/** PostgreSQL 错误信息结构体 */
export interface PostgresErrorInfo {
  /** 错误类型 */
  errorType: PostgresError
  /** 错误消息 */
  message: string
  /** 错误详情 */
  details?: string
}

/** PostgreSQL 配置结构体 */
export interface PostgresSettings {
  /** PostgreSQL 版本 */
  version?: string
  /** 端口号 */
  port?: number
  /** 用户名 */
  username?: string
  /** 密码 */
  password?: string
  /** 数据库名 */
  databaseName?: string
  /** 数据目录 */
  dataDir?: string
  /** 安装目录 */
  installationDir?: string
  /** 超时时间（秒） */
  timeout?: number
  /** 是否持久化 */
  persistent?: boolean
}
