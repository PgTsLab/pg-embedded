/* auto-generated by NAPI-RS */
/* eslint-disable */
/** 连接信息结构体 */
export declare class ConnectionInfo {
  /** 主机地址 */
  host: string
  /** 端口号 */
  port: number
  /** 用户名 */
  username: string
  /** 密码 */
  password: string
  /** 数据库名 */
  databaseName: string
  /** 连接字符串 */
  connectionString: string
  /** 生成不包含密码的安全连接字符串（用于日志记录） */
  safeConnectionString(): string
  /** 生成 JDBC 格式的连接字符串 */
  jdbcUrl(): string
}

/**
 * PostgreSQL embedded instance manager
 *
 * This class provides a high-level interface for managing embedded PostgreSQL instances.
 * It supports both synchronous and asynchronous operations, automatic resource management,
 * and connection caching for optimal performance.
 *
 * @example
 * ```typescript
 * import { PostgresInstance } from 'pg-embedded';
 *
 * const instance = new PostgresInstance({
 *   port: 5432,
 *   username: 'postgres',
 *   password: 'password'
 * });
 *
 * await instance.start();
 * await instance.createDatabase('mydb');
 * await instance.stop();
 * ```
 */
export declare class PostgresInstance {
  /**
   * Creates a new PostgreSQL instance with the specified settings
   *
   * @param settings - Configuration settings for the PostgreSQL instance
   * @returns A new PostgresInstance
   *
   * @example
   * ```typescript
   * const instance = new PostgresInstance({
   *   port: 5432,
   *   username: 'postgres',
   *   password: 'password',
   *   persistent: false
   * });
   * ```
   */
  constructor(settings?: PostgresSettings | undefined | null)
  /**
   * Gets the unique instance ID
   *
   * @returns The unique identifier for this PostgreSQL instance
   */
  get instanceId(): string
  /**
   * Gets the current state of the PostgreSQL instance
   *
   * @returns The current instance state (Stopped, Starting, Running, or Stopping)
   */
  get state(): InstanceState
  /**
   * Gets the connection information for the PostgreSQL instance
   *
   * This method returns cached connection information when available for better performance.
   * The cache is automatically invalidated after 5 minutes.
   *
   * @returns Connection information including host, port, username, and connection string
   * @throws Error if the instance is not running
   */
  get connectionInfo(): ConnectionInfo
  /**
   * Checks if the PostgreSQL instance is healthy and running
   *
   * @returns true if the instance is running and healthy, false otherwise
   */
  isHealthy(): boolean
  /**
   * Sets up the PostgreSQL instance asynchronously
   *
   * This method initializes the PostgreSQL instance but does not start it.
   * It's automatically called by start() if needed.
   *
   * @returns Promise that resolves when setup is complete
   * @throws Error if setup fails
   */
  setup(): Promise<void>
  /**
   * Starts the PostgreSQL instance asynchronously
   *
   * This method starts the PostgreSQL server and makes it ready to accept connections.
   * It includes automatic setup if the instance hasn't been set up yet.
   *
   * @returns Promise that resolves when the instance is started and ready
   * @throws Error if the instance is already running or if startup fails
   *
   * @example
   * ```typescript
   * await instance.start();
   * console.log('PostgreSQL is ready!');
   * ```
   */
  start(): Promise<void>
  /**
   * Stops the PostgreSQL instance asynchronously
   *
   * This method gracefully shuts down the PostgreSQL server.
   *
   * @returns Promise that resolves when the instance is stopped
   * @throws Error if the instance is already stopped or if stopping fails
   *
   * @example
   * ```typescript
   * await instance.stop();
   * console.log('PostgreSQL stopped');
   * ```
   */
  stop(): Promise<void>
  /**
   * Creates a new database asynchronously
   *
   * @param name - The name of the database to create
   * @returns Promise that resolves when the database is created
   * @throws Error if the instance is not running or if database creation fails
   *
   * @example
   * ```typescript
   * await instance.createDatabase('myapp');
   * ```
   */
  createDatabase(name: string): Promise<void>
  /**
   * Drops (deletes) a database asynchronously
   *
   * @param name - The name of the database to drop
   * @returns Promise that resolves when the database is dropped
   * @throws Error if the instance is not running or if database deletion fails
   *
   * @example
   * ```typescript
   * await instance.dropDatabase('myapp');
   * ```
   */
  dropDatabase(name: string): Promise<void>
  /**
   * Checks if a database exists asynchronously
   *
   * @param name - The name of the database to check
   * @returns Promise that resolves to true if the database exists, false otherwise
   * @throws Error if the instance is not running or if the check fails
   *
   * @example
   * ```typescript
   * const exists = await instance.databaseExists('myapp');
   * if (exists) {
   *   console.log('Database exists');
   * }
   * ```
   */
  databaseExists(name: string): Promise<boolean>
  /**
   * Sets up the PostgreSQL instance synchronously
   *
   * This method initializes the PostgreSQL instance but does not start it.
   * It's automatically called by startSync() if needed.
   *
   * @returns void
   * @throws Error if setup fails
   */
  setupSync(): void
  /**
   * Starts the PostgreSQL instance synchronously
   *
   * This method starts the PostgreSQL server and makes it ready to accept connections.
   * It includes automatic setup if the instance hasn't been set up yet.
   *
   * @returns void
   * @throws Error if the instance is already running or if startup fails
   *
   * @example
   * ```typescript
   * instance.startSync();
   * console.log('PostgreSQL is ready!');
   * ```
   */
  startSync(): void
  /**
   * Stops the PostgreSQL instance synchronously
   *
   * This method gracefully shuts down the PostgreSQL server.
   *
   * @returns void
   * @throws Error if the instance is already stopped or if stopping fails
   *
   * @example
   * ```typescript
   * instance.stopSync();
   * console.log('PostgreSQL stopped');
   * ```
   */
  stopSync(): void
  /**
   * Creates a new database synchronously
   *
   * @param name - The name of the database to create
   * @returns void
   * @throws Error if the instance is not running or if database creation fails
   *
   * @example
   * ```typescript
   * instance.createDatabaseSync('myapp');
   * ```
   */
  createDatabaseSync(name: string): void
  /**
   * Drops (deletes) a database synchronously
   *
   * @param name - The name of the database to drop
   * @returns void
   * @throws Error if the instance is not running or if database deletion fails
   *
   * @example
   * ```typescript
   * instance.dropDatabaseSync('myapp');
   * ```
   */
  dropDatabaseSync(name: string): void
  /**
   * Checks if a database exists synchronously
   *
   * @param name - The name of the database to check
   * @returns true if the database exists, false otherwise
   * @throws Error if the instance is not running or if the check fails
   *
   * @example
   * ```typescript
   * const exists = instance.databaseExistsSync('myapp');
   * if (exists) {
   *   console.log('Database exists');
   * }
   * ```
   */
  databaseExistsSync(name: string): boolean
  /**
   * Starts the PostgreSQL instance asynchronously with a timeout
   *
   * @param timeout_seconds - Maximum time to wait for startup in seconds
   * @returns Promise that resolves when the instance is started and ready
   * @throws Error if the instance is already running, if startup fails, or if timeout is exceeded
   *
   * @example
   * ```typescript
   * await instance.startWithTimeout(30); // 30 second timeout
   * ```
   */
  startWithTimeout(timeoutSeconds: number): Promise<void>
  /**
   * Stops the PostgreSQL instance asynchronously with a timeout
   *
   * @param timeout_seconds - Maximum time to wait for shutdown in seconds
   * @returns Promise that resolves when the instance is stopped
   * @throws Error if the instance is already stopped, if stopping fails, or if timeout is exceeded
   *
   * @example
   * ```typescript
   * await instance.stopWithTimeout(10); // 10 second timeout
   * ```
   */
  stopWithTimeout(timeoutSeconds: number): Promise<void>
  /**
   * Gets the startup time of the PostgreSQL instance in seconds
   *
   * This method returns the time it took for the last successful start operation.
   *
   * @returns The startup time in seconds, or null if the instance hasn't been started yet
   *
   * @example
   * ```typescript
   * await instance.start();
   * const startupTime = instance.getStartupTime();
   * console.log(`Started in ${startupTime} seconds`);
   * ```
   */
  getStartupTime(): number | null
  /**
   * Gets the configuration hash for this instance
   *
   * This hash is used internally for caching and can be useful for debugging.
   *
   * @returns A string hash of the instance configuration
   */
  getConfigHash(): string
  /**
   * Clears the connection information cache
   *
   * This forces the next call to connectionInfo to regenerate the connection information.
   *
   * @returns void
   */
  clearConnectionCache(): void
  /**
   * Checks if the connection information cache is valid
   *
   * The cache is considered valid if it exists and is less than 5 minutes old.
   *
   * @returns true if the cache is valid, false otherwise
   */
  isConnectionCacheValid(): boolean
  /**
   * Manually cleans up all resources associated with this instance
   *
   * This method stops the PostgreSQL instance (if running) and cleans up all resources.
   * It's automatically called when the instance is dropped, but can be called manually
   * for immediate cleanup.
   *
   * @returns void
   *
   * @example
   * ```typescript
   * instance.cleanup();
   * console.log('Resources cleaned up');
   * ```
   */
  cleanup(): void
}

/** 初始化日志记录器 */
export declare function initLogger(level?: LogLevel | undefined | null): void

/** PostgreSQL 实例状态枚举 */
export declare const enum InstanceState {
  /** 已停止 */
  Stopped = 0,
  /** 启动中 */
  Starting = 1,
  /** 运行中 */
  Running = 2,
  /** 停止中 */
  Stopping = 3
}

/** 记录调试日志 */
export declare function logDebug(message: string): void

/** 记录错误日志 */
export declare function logError(message: string): void

/** 记录信息日志 */
export declare function logInfo(message: string): void

/** 日志级别枚举 */
export declare const enum LogLevel {
  /** 错误级别 */
  Error = 0,
  /** 警告级别 */
  Warn = 1,
  /** 信息级别 */
  Info = 2,
  /** 调试级别 */
  Debug = 3,
  /** 跟踪级别 */
  Trace = 4
}

/** 记录跟踪日志 */
export declare function logTrace(message: string): void

/** 记录警告日志 */
export declare function logWarn(message: string): void

/** PostgreSQL 错误类型枚举 */
export declare const enum PostgresError {
  /** 设置错误 */
  SetupError = 0,
  /** 启动错误 */
  StartError = 1,
  /** 停止错误 */
  StopError = 2,
  /** 数据库操作错误 */
  DatabaseError = 3,
  /** 配置错误 */
  ConfigurationError = 4,
  /** 连接错误 */
  ConnectionError = 5,
  /** 超时错误 */
  TimeoutError = 6
}

/** PostgreSQL 错误信息结构体 */
export interface PostgresErrorInfo {
  /** 错误类型 */
  errorType: PostgresError
  /** 错误消息 */
  message: string
  /** 错误详情 */
  details?: string
}

/**
 * PostgreSQL configuration settings
 *
 * This object defines all the configuration options for a PostgreSQL embedded instance.
 * All fields are optional and will use sensible defaults if not provided.
 *
 * @example
 * ```typescript
 * const settings: PostgresSettings = {
 *   port: 5432,
 *   username: 'postgres',
 *   password: 'mypassword',
 *   persistent: false
 * };
 * ```
 */
export interface PostgresSettings {
  /** PostgreSQL version (e.g., "15.0", ">=14.0")  */
  version?: string
  /** Port number (1-65535, default: 5432)  */
  port?: number
  /** Username for database connection (default: "postgres")  */
  username?: string
  /** Password for database connection (default: "postgres")  */
  password?: string
  /** Default database name (default: "postgres")  */
  databaseName?: string
  /** Custom data directory path  */
  dataDir?: string
  /** Custom installation directory path  */
  installationDir?: string
  /** Timeout in seconds (default: 30)  */
  timeout?: number
  /** Whether to persist data between runs (default: false)  */
  persistent?: boolean
}
